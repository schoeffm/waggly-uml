#!/usr/bin/env node
'use strict';

var program  = require('commander');
var _ = require('lodash');
var graphviz = require('graphviz');
var wagglySvg = require('wsvg');
var classProcessor = require('./classDiagramProcessor');
var notSupportedProcessor = require('./notSupportedDiagramProcessor');
var fs = require('fs');
var util = require('util');
var exec = require('child_process').exec;
var spawn = require('child_process').spawn;

var types = {};
types['class'] = classProcessor;
types['sequence'] = notSupportedProcessor;
types[''] = notSupportedProcessor;
    
program
    .version('0.0.1')
    .option('-p, --png', "Export to PNG")
    .option('-t, --type [class|sequence]', "Determines the graph-type to be created based on the given input (default is 'class')")
    .option('-c, --content <content>', "UML-image content as input-string")
    .option('-i, --input <path>', "Input UML description file")
    .option('-o, --output <path>', "Filename for the output diagram file")
    .option('-w, --waggly', "Turns on the waggly-mode")
    .option('--fontFamily <font>', "Set the output font-family (i.e. Purisa or Dadhand)")
    .option('--fontSize <size>', "Set the size of the font to be used")
    .parse(process.argv);

// ------------------------ private functions ---------------------

var handleDotData = function(dotInputData, config, callback) {
    var dot = spawn('dot', ['-Tsvg']);
    
    var accumulator = '';
    dot.stdout.on('data', function(dotOutputData) { accumulator += dotOutputData.toString(); });
    dot.on('exit', function(exitCode) {
        if (exitCode === 0) { handleSVGData(accumulator, config, callback); }
        else { console.error("SVG-creation wasn't successful - exitCode " + exitCode); }
    });
    dot.stderr.on('data', function(error) { console.error(error.toString()); });
    dot.stdin.write(dotInputData, function() { dot.stdin.end(); });
};

var handleSVGData = function(svgInputData, config, callback) {
    var waggly = config.waggly || false;
    var wagger = wagglySvg.create({
        waggly: waggly,
        font_family: (waggly) ? (config.fontFamily || 'Dadhand') : undefined,
        font_size: (waggly) ? (config.fontSize || 10) : undefined
    }, function(waggledData) { 
        handleOutputData(waggledData, config, callback); 
    });
    
    wagger.transformString(svgInputData);
};

var handleOutputData = function(outputData, config, callback) {
    if (config.output) {
        fs.writeFile(config.output, outputData, function (err) {
            if (err) return console.log(err);
            if (config.png) {
                exec('rsvg-convert -f png -o ' + config.output.replace(/svg$/, 'png') + ' ' + config.output);
            }
        });
    } else if(callback) {
        callback(outputData);
    } else {
        console.log(outputData);
    }
};

if (!process.argv.slice(2).length) {
    console.log('No command specified. See \'wuml --help\':');
    program.outputHelp();
    process.exit(1);
}

// default is the class-processor - otherwise you'll have to provide a sensible input
var processor = (program.type && types[program.type]) ? types[program.type] : classProcessor;

if (program.content) {
    processor.processString(program.content, function(output) { handleDotData(output, program); });
} else if (program.input) {
    processor.processFile(program.input, function(output) { handleDotData(output, program); });
} else {
    console.log('No input specified. See \'wuml --help\':');
    program.outputHelp();
    process.exit(1);
}


module.exports.createDiagram = function(umlAsString, config, callback) {
    var cb = (callback === undefined && typeof config === 'function') ? config : callback;
    if (cb === undefined || typeof cb !== 'function') { throw new Error('You have to provide a callback-function'); }

    var processor = (config.type && types[program.type]) ? types[config.type] : classProcessor;
    
    processor.processString(program.content, function(output) { 
        handleDotData(output, config, callback); 
    });
};